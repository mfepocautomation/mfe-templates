name: Create Product Repository

on:
  workflow_dispatch:
    inputs:
      product_name:
        description: 'Product name (e.g., product-a, product-b)'
        required: true
        type: string
      product_display_name:
        description: 'Product display name (e.g., Product A, Product B)'
        required: true
        type: string
      repository_visibility:
        description: 'Repository visibility'
        required: false
        type: choice
        options:
          - public
          - private
        default: 'private'

jobs:
  create-product-repository:
    name: Create Product Repository
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Portal Template
        uses: actions/checkout@v4
        with:
          path: portal-template

      - name: Debug repository owner
        run: |
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Repository: ${{ github.repository }}"

      - name: Create new repository
        id: create-repo
        run: |
          # Try to create repository in the organization first
          echo "Attempting to create repository in organization: ${{ github.repository_owner }}"
          
          response=$(curl -s -w "%{http_code}" -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/orgs/${{ github.repository_owner }}/repos \
            -d '{
              "name": "${{ inputs.product_name }}",
              "description": "Portal for ${{ inputs.product_display_name }}",
              "private": ${{ inputs.repository_visibility == 'private' }},
              "auto_init": false
            }')
          
          http_code="${response: -3}"
          response_body="${response%???}"
          
          echo "Organization API response code: $http_code"
          echo "Organization API response body: $response_body"
          
          if [ "$http_code" = "201" ]; then
            echo "Repository created in organization"
          else
            echo "Failed to create in organization, trying user account..."
            
            # Get the authenticated user
            user_response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/user)
            
            echo "User info: $user_response"
            
            response=$(curl -s -w "%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/user/repos \
              -d '{
                "name": "${{ inputs.product_name }}",
                "description": "Portal for ${{ inputs.product_display_name }}",
                "private": ${{ inputs.repository_visibility == 'private' }},
                "auto_init": false
              }')
            
            http_code="${response: -3}"
            response_body="${response%???}"
            
            echo "User API response code: $http_code"
            echo "User API response body: $response_body"
            
            if [ "$http_code" != "201" ]; then
              echo "Error creating repository: $response_body"
              exit 1
            fi
          fi
          
          echo "repository_name=${{ inputs.product_name }}" >> $GITHUB_OUTPUT

      - name: Clone new repository
        run: |
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/${{ steps.create-repo.outputs.repository_name }}.git product-repo

      - name: Copy portal content
        run: |
          # Copy all content from portal folder to the root of the new repository
          cp -r portal-template/portal/* product-repo/

      - name: Commit and push
        run: |
          cd product-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "feat: initial commit - portal template for ${{ inputs.product_display_name }}"
          git push origin main

      - name: Success notification
        run: |
          echo "âœ… Repository '${{ inputs.product_name }}' created successfully!"
          echo "ðŸ”— URL: https://github.com/${{ github.repository_owner }}/${{ inputs.product_name }}" 